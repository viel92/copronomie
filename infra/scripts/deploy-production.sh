#!/bin/bash

# Script de d√©ploiement production - OVH VPS (51.75.207.4)
# Usage: ./deploy-production.sh

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PRODUCTION_HOST="51.75.207.4"
PRODUCTION_USER="copronomie"
PRODUCTION_PATH="/opt/copronomie"
DOCKER_COMPOSE_FILE="docker-compose.prod.yml"

echo -e "${BLUE}üöÄ D√©marrage du d√©ploiement PRODUCTION${NC}"
echo -e "${BLUE}Serveur: ${PRODUCTION_HOST}${NC}"
echo -e "${BLUE}Date: $(date)${NC}"
echo ""

# V√©rifications pr√©alables
echo -e "${YELLOW}üîç V√©rifications pr√©alables...${NC}"

# V√©rifier que nous sommes sur la branche main
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo -e "${RED}‚ùå Erreur: D√©ploiement production uniquement depuis la branche 'main'${NC}"
    echo -e "${RED}Branche actuelle: $CURRENT_BRANCH${NC}"
    exit 1
fi

# V√©rifier que le working tree est propre
if [ -n "$(git status --porcelain)" ]; then
    echo -e "${RED}‚ùå Erreur: Working tree non propre. Committez vos changements.${NC}"
    git status --short
    exit 1
fi

# V√©rifier les variables d'environnement
if [ ! -f ".env.production" ]; then
    echo -e "${RED}‚ùå Erreur: Fichier .env.production manquant${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ V√©rifications OK${NC}"

# Build et test en local
echo -e "${YELLOW}üèóÔ∏è Build et tests locaux...${NC}"
pnpm install --frozen-lockfile
pnpm build
pnpm test:ci || echo -e "${YELLOW}‚ö†Ô∏è Tests √©chou√©s, mais on continue...${NC}"

echo -e "${GREEN}‚úÖ Build local r√©ussi${NC}"

# Cr√©ation de l'archive de d√©ploiement
echo -e "${YELLOW}üì¶ Cr√©ation de l'archive de d√©ploiement...${NC}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
ARCHIVE_NAME="copronomie-${TIMESTAMP}.tar.gz"

# Exclure les fichiers non n√©cessaires
tar --exclude='node_modules' \
    --exclude='.next' \
    --exclude='dist' \
    --exclude='.git' \
    --exclude='*.log' \
    --exclude='.env*' \
    -czf "/tmp/${ARCHIVE_NAME}" .

echo -e "${GREEN}‚úÖ Archive cr√©√©e: /tmp/${ARCHIVE_NAME}${NC}"

# Upload sur le serveur
echo -e "${YELLOW}üì§ Upload vers le serveur production...${NC}"
scp "/tmp/${ARCHIVE_NAME}" "${PRODUCTION_USER}@${PRODUCTION_HOST}:/tmp/"
scp ".env.production" "${PRODUCTION_USER}@${PRODUCTION_HOST}:/tmp/.env"

echo -e "${GREEN}‚úÖ Upload termin√©${NC}"

# D√©ploiement sur le serveur
echo -e "${YELLOW}üöÄ D√©ploiement sur le serveur...${NC}"
ssh "${PRODUCTION_USER}@${PRODUCTION_HOST}" << EOF
    set -euo pipefail
    
    echo "üìÅ Pr√©paration du r√©pertoire de d√©ploiement..."
    sudo mkdir -p ${PRODUCTION_PATH}
    sudo chown ${PRODUCTION_USER}:${PRODUCTION_USER} ${PRODUCTION_PATH}
    
    echo "üóÇÔ∏è Backup de la version pr√©c√©dente..."
    if [ -d "${PRODUCTION_PATH}/current" ]; then
        sudo mv ${PRODUCTION_PATH}/current ${PRODUCTION_PATH}/backup-$(date +%Y%m%d_%H%M%S)
    fi
    
    echo "üì¶ Extraction de la nouvelle version..."
    mkdir -p ${PRODUCTION_PATH}/current
    cd ${PRODUCTION_PATH}/current
    tar -xzf /tmp/${ARCHIVE_NAME}
    cp /tmp/.env ${PRODUCTION_PATH}/current/.env
    
    echo "üê≥ Arr√™t des services existants..."
    docker-compose -f ${DOCKER_COMPOSE_FILE} down || true
    
    echo "üèóÔ∏è Build des images Docker..."
    docker-compose -f ${DOCKER_COMPOSE_FILE} build --no-cache
    
    echo "üöÄ D√©marrage des nouveaux services..."
    docker-compose -f ${DOCKER_COMPOSE_FILE} up -d
    
    echo "‚è≥ Attente du d√©marrage des services..."
    sleep 30
    
    echo "üîç V√©rification de la sant√© des services..."
    docker-compose -f ${DOCKER_COMPOSE_FILE} ps
    
    # Health check
    if curl -f -s "http://localhost:3000/api/health" > /dev/null; then
        echo "‚úÖ Service en bonne sant√©"
    else
        echo "‚ùå Service non accessible"
        docker-compose -f ${DOCKER_COMPOSE_FILE} logs web
        exit 1
    fi
    
    echo "üßπ Nettoyage..."
    rm -f /tmp/${ARCHIVE_NAME} /tmp/.env
    docker system prune -f
    
    echo "‚úÖ D√©ploiement production termin√© avec succ√®s!"
EOF

# Nettoyage local
rm -f "/tmp/${ARCHIVE_NAME}"

# Tests post-d√©ploiement
echo -e "${YELLOW}üîç Tests post-d√©ploiement...${NC}"
sleep 10

# Test de base
if curl -f -s "https://copronomie.fr/api/health" > /dev/null; then
    echo -e "${GREEN}‚úÖ Site principal accessible${NC}"
else
    echo -e "${RED}‚ùå Site principal non accessible${NC}"
    exit 1
fi

# Notification de succ√®s
echo ""
echo -e "${GREEN}üéâ D√âPLOIEMENT PRODUCTION R√âUSSI! üéâ${NC}"
echo -e "${GREEN}URL: https://copronomie.fr${NC}"
echo -e "${GREEN}Health: https://copronomie.fr/api/health${NC}"
echo -e "${GREEN}Date: $(date)${NC}"
echo ""

# Log du d√©ploiement
echo "$(date): D√©ploiement production r√©ussi - Version ${TIMESTAMP}" >> deployment.log