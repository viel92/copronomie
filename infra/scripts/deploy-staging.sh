#!/bin/bash

# Script de d√©ploiement staging - Hetzner VPS (46.62.158.59)  
# Usage: ./deploy-staging.sh

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
STAGING_HOST="46.62.158.59"
STAGING_USER="copronomie"
STAGING_PATH="/opt/copronomie-staging"
DOCKER_COMPOSE_FILE="docker-compose.staging.yml"

echo -e "${BLUE}üß™ D√©marrage du d√©ploiement STAGING${NC}"
echo -e "${BLUE}Serveur: ${STAGING_HOST}${NC}"
echo -e "${BLUE}Date: $(date)${NC}"
echo ""

# V√©rifications pr√©alables
echo -e "${YELLOW}üîç V√©rifications pr√©alables...${NC}"

# V√©rifier que nous sommes sur la branche staging ou develop
CURRENT_BRANCH=$(git branch --show-current)
if [[ "$CURRENT_BRANCH" != "staging" && "$CURRENT_BRANCH" != "develop" && "$CURRENT_BRANCH" != "main" ]]; then
    echo -e "${RED}‚ùå Erreur: D√©ploiement staging depuis staging/develop/main uniquement${NC}"
    echo -e "${RED}Branche actuelle: $CURRENT_BRANCH${NC}"
    exit 1
fi

# V√©rifier les variables d'environnement
if [ ! -f ".env.staging" ]; then
    echo -e "${RED}‚ùå Erreur: Fichier .env.staging manquant${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ V√©rifications OK${NC}"

# Build en local (plus permissif pour staging)
echo -e "${YELLOW}üèóÔ∏è Build local...${NC}"
pnpm install
pnpm build || echo -e "${YELLOW}‚ö†Ô∏è Build √©chou√©, mais on continue pour staging...${NC}"

echo -e "${GREEN}‚úÖ Build local termin√©${NC}"

# Cr√©ation de l'archive de d√©ploiement
echo -e "${YELLOW}üì¶ Cr√©ation de l'archive de d√©ploiement...${NC}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
ARCHIVE_NAME="copronomie-staging-${TIMESTAMP}.tar.gz"

tar --exclude='node_modules' \
    --exclude='.next' \
    --exclude='dist' \
    --exclude='.git' \
    --exclude='*.log' \
    --exclude='.env*' \
    -czf "/tmp/${ARCHIVE_NAME}" .

echo -e "${GREEN}‚úÖ Archive cr√©√©e: /tmp/${ARCHIVE_NAME}${NC}"

# Upload sur le serveur
echo -e "${YELLOW}üì§ Upload vers le serveur staging...${NC}"
scp "/tmp/${ARCHIVE_NAME}" "${STAGING_USER}@${STAGING_HOST}:/tmp/"
scp ".env.staging" "${STAGING_USER}@${STAGING_HOST}:/tmp/.env"

echo -e "${GREEN}‚úÖ Upload termin√©${NC}"

# D√©ploiement sur le serveur
echo -e "${YELLOW}üöÄ D√©ploiement sur le serveur staging...${NC}"
ssh "${STAGING_USER}@${STAGING_HOST}" << EOF
    set -euo pipefail
    
    echo "üìÅ Pr√©paration du r√©pertoire staging..."
    sudo mkdir -p ${STAGING_PATH}
    sudo chown ${STAGING_USER}:${STAGING_USER} ${STAGING_PATH}
    
    echo "üóÇÔ∏è Backup rapide de la version pr√©c√©dente..."
    if [ -d "${STAGING_PATH}/current" ]; then
        rm -rf ${STAGING_PATH}/previous || true
        mv ${STAGING_PATH}/current ${STAGING_PATH}/previous || true
    fi
    
    echo "üì¶ Extraction de la nouvelle version..."
    mkdir -p ${STAGING_PATH}/current
    cd ${STAGING_PATH}/current
    tar -xzf /tmp/${ARCHIVE_NAME}
    cp /tmp/.env ${STAGING_PATH}/current/.env
    
    echo "üê≥ Arr√™t des services staging existants..."
    docker-compose -f ${DOCKER_COMPOSE_FILE} down || true
    
    echo "üèóÔ∏è Build des images Docker staging..."
    docker-compose -f ${DOCKER_COMPOSE_FILE} build
    
    echo "üöÄ D√©marrage des services staging..."
    docker-compose -f ${DOCKER_COMPOSE_FILE} up -d
    
    echo "‚è≥ Attente du d√©marrage..."
    sleep 20
    
    echo "üîç V√©rification des services..."
    docker-compose -f ${DOCKER_COMPOSE_FILE} ps
    
    # Health check plus permissif
    if curl -f -s "http://localhost:3000/api/health" > /dev/null; then
        echo "‚úÖ Service staging en bonne sant√©"
    else
        echo "‚ö†Ô∏è Service staging potentiellement non accessible, mais on continue..."
        docker-compose -f ${DOCKER_COMPOSE_FILE} logs web | tail -20
    fi
    
    echo "üßπ Nettoyage..."
    rm -f /tmp/${ARCHIVE_NAME} /tmp/.env
    
    echo "‚úÖ D√©ploiement staging termin√©!"
EOF

# Nettoyage local
rm -f "/tmp/${ARCHIVE_NAME}"

# Tests post-d√©ploiement
echo -e "${YELLOW}üîç Tests staging...${NC}"
sleep 5

# Test basique
if curl -f -s "https://staging.copronomie.fr/api/health" > /dev/null; then
    echo -e "${GREEN}‚úÖ Site staging accessible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Site staging pas encore accessible (normal)${NC}"
fi

# Notification de succ√®s
echo ""
echo -e "${GREEN}üß™ D√âPLOIEMENT STAGING TERMIN√â! üß™${NC}"
echo -e "${GREEN}URL: https://staging.copronomie.fr${NC}"
echo -e "${GREEN}Health: https://staging.copronomie.fr/api/health${NC}"
echo -e "${GREEN}Branch: ${CURRENT_BRANCH}${NC}"
echo -e "${GREEN}Date: $(date)${NC}"
echo ""

# Log du d√©ploiement
echo "$(date): D√©ploiement staging termin√© - Branch ${CURRENT_BRANCH} - Version ${TIMESTAMP}" >> deployment-staging.log